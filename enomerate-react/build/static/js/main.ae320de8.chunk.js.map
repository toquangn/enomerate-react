{"version":3,"sources":["components/Search.js","components/Restaurants.js","components/Best.js","App.js","reportWebVitals.js","index.js"],"names":["Search","setRestaurants","useContext","RestaurantsContext","useState","status","setStatus","max","setMax","href","rel","className","style","textAlign","axis","xstep","xmin","xmax","x","onChange","onClick","navigator","geolocation","getCurrentPosition","pos","a","fetch","coords","latitude","longitude","res","json","data","sort","Math","random","alreadyRemoved","Restaurants","lastDirection","setLastDirection","BestContext","best","setBest","restaurants","setDone","DoneContext","childRefs","useMemo","Array","length","fill","map","i","React","createRef","swipe","dir","cardsLeft","filter","restaurant","includes","id","toBeRemoved","index","indexOf","push","current","ref","onSwipe","direction","nameToDelete","name","backgroundImage","image_url","window","open","url","rating","starRatedColor","starDimension","starSpacing","review_count","categories","r","title","join","Best","createContext","App","done","Provider","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae320de8.chunk.js","sourcesContent":["import React, { useState, useContext } from 'react'\nimport { RestaurantsContext } from '../App';\nimport Slider from 'react-input-slider';\n\nfunction Search () {\n  const { setRestaurants } = useContext(RestaurantsContext)\n\n  const [status, setStatus] = useState(null);\n  const [max,setMax] = useState(20);\n\n  function shuffle(array) {\n    array.sort(() => Math.random() - 0.5);\n  }\n\n  const getLocation = () => {\n    if (!navigator.geolocation) {\n      setStatus('Geolocation is not supported by your browser');\n    } else {\n      setStatus('Locating...');\n      navigator.geolocation.getCurrentPosition(async (pos) => {\n        setStatus(null);\n        const res = await fetch(`api/${pos.coords.latitude}/${pos.coords.longitude}/${max}`);\n        const data = await res.json();\n        shuffle(data);\n        setRestaurants(data);\n      }, () => {\n        setStatus('Unable to retrieve your location');\n      });\n    }\n  }\n\n  return (\n    <div>\n      <link href='https://fonts.googleapis.com/css?family=Damion&display=swap' rel='stylesheet' />\n      <link href='https://fonts.googleapis.com/css?family=Alatsi&display=swap' rel='stylesheet' />\n      <div className='cardContainer'> \n          <div className='card'>\n            <div className='cardDetails' style={{textAlign:'center'}}>\n            <h4 className='searchInstructions'>Amount of places to choose from:</h4>\n            <h1 className='maxLabel'>{max}</h1>\n            <Slider\n              axis=\"x\"\n              xstep={10}\n              xmin={10}\n              xmax={50}\n              x={max}\n              onChange={({ x }) => setMax(x)}\n            />\n            </div>\n            <h3 className='status'>{status}</h3>\n          </div>\n      </div>\n      <div className='buttons'>\n        <button className='search-button' onClick={getLocation}>Search</button>\n      </div>\n    </div>\n  )\n}\n\nexport default Search","import React, { useState, useMemo, useContext } from 'react';\nimport TinderCard from 'react-tinder-card';\nimport StarRatings from 'react-star-ratings';\nimport { RestaurantsContext, BestContext, DoneContext } from '../App';\n\nconst alreadyRemoved = []\n\nfunction Restaurants () {\n  const [lastDirection, setLastDirection] = useState()\n\n  const { best, setBest } = useContext(BestContext)\n  const { restaurants } = useContext(RestaurantsContext)\n  const { setDone } = useContext(DoneContext)\n\n\n  const childRefs = useMemo(() => Array(restaurants.length).fill(0).map(i => React.createRef()), [restaurants])\n\n  const swiped = (direction, nameToDelete) => {\n    //console.log('removing: ' + nameToDelete)\n    setLastDirection(direction)\n    alreadyRemoved.push(nameToDelete)\n  }\n\n  const swipe = async (dir) => {\n    const cardsLeft = restaurants.filter(restaurant => !alreadyRemoved.includes(restaurant.id))\n    if (cardsLeft.length) {\n      const toBeRemoved = cardsLeft[cardsLeft.length - 1].id // Find the card object to be removed\n      const index = restaurants.map(restaurant => restaurant.id).indexOf(toBeRemoved) // Find the index of which to make the reference to\n      alreadyRemoved.push(toBeRemoved) // Make sure the next card gets removed next time if this card do not have time to exit the screen\n      await childRefs[index].current.swipe(dir) // Swipe the card!\n\n      // Assign best restaurant candidate on first pass\n      if (dir === 'right' && !best) {\n        setBest(restaurants[index])\n      }\n      // Overrides current best restaurant, completes exploration\n      if (dir === 'right' && best) {\n        setBest(restaurants[index])\n        setDone(true);\n      }    \n      // Assign best restaurant to last index when none chosen\n      if (cardsLeft.length === 1) {\n        if (!best) setBest(restaurants[index]);\n        setDone(true);\n      }\n    }\n  }\n\n  return (\n    <div>\n      <link href='https://fonts.googleapis.com/css?family=Damion&display=swap' rel='stylesheet' />\n      <link href='https://fonts.googleapis.com/css?family=Alatsi&display=swap' rel='stylesheet' />\n      <div className='cardContainer'>\n        {restaurants.map((restaurant, index) =>\n          <TinderCard ref={childRefs[index]} className='swipe' key={restaurant.name} onSwipe={(dir) => swiped(dir, restaurant.name)}>\n            <div className='card'>\n              <div style={{ backgroundImage: 'url(' + restaurant.image_url + ')' }} className='cardThumbnail'></div>\n              <div className='cardDetails'>\n                <h2 className='restaurantName' onClick={()=> window.open(`${restaurant.url}`, \"_blank\")}>{restaurant.name}</h2>\n                <div>\n                <StarRatings\n                  rating={ restaurant.rating }\n                  starRatedColor='rgb(220, 57, 28)'\n                  starDimension='20px'\n                  starSpacing='0'\n                  name='rating'\n                />\n                 <span className='reviewCount'>{ restaurant.review_count } reviews</span>\n                </div>\n                <div className='categories'>\n                  { restaurant.categories.map(r => r.title).join(', ') }\n                </div>\n              </div>\n            </div>\n          </TinderCard>\n        )}\n      </div>\n      <div className='buttons'>\n        <button className='discard-button' onClick={() => swipe('left')}>Discard</button>\n        <button className='keep-button' onClick={() => swipe('right')}>Keep</button>\n      </div>\n      {lastDirection ? <h2 key={lastDirection} className='infoText'>You swiped {lastDirection}</h2> : <h2 className='infoText'>Swipe a card or press a button to get started!</h2>}\n    </div>\n  )\n}\n\nexport default Restaurants","import React, { useContext } from 'react'\nimport StarRatings from 'react-star-ratings'\nimport { BestContext } from '../App'\n\nfunction Best () {\n\n  const { best } = useContext(BestContext)\n\n  return (\n    <div>\n      <link href='https://fonts.googleapis.com/css?family=Damion&display=swap' rel='stylesheet' />\n      <link href='https://fonts.googleapis.com/css?family=Alatsi&display=swap' rel='stylesheet' />\n      <div className='cardContainer'> \n          <div className='card'>\n            <div style={{ backgroundImage: 'url(' + best.image_url + ')' }} className='cardThumbnail'></div>\n            <div className='cardDetails'>\n              <h2 className='restaurantName' onClick={()=> window.open(`${best.url}`, \"_blank\")}>{best.name}</h2>\n              <div>\n              <StarRatings\n                rating={ best.rating }\n                starRatedColor='rgb(220, 57, 28)'\n                starDimension='20px'\n                starSpacing='0'\n                name='rating'\n              />\n                <span className='reviewCount'>{ best.review_count } reviews</span>\n              </div>\n              <div className='categories'>\n                { best.categories.map(r => r.title).join(', ') }\n              </div>\n            </div>\n          </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Best","import React, { useState, createContext } from 'react'\nimport Search from './components/Search'\nimport Restaurants from './components/Restaurants'\nimport Best from './components/Best'\nimport './App.css'\n\nexport const RestaurantsContext = createContext();\nexport const BestContext = createContext();\nexport const DoneContext = createContext();\n\nfunction App () {\n  const [restaurants,setRestaurants] = useState([]);\n  const [best,setBest] = useState(null);\n  const [done,setDone] = useState(false);\n\n  return (\n    <RestaurantsContext.Provider value={{restaurants,setRestaurants}}>\n      <BestContext.Provider value={{best,setBest}}>\n        <DoneContext.Provider value={{done,setDone}}>\n        <div className='app'>\n          {!done ? <h1>Enomerate</h1> : <h1>Your best choice:</h1>}\n          {!restaurants.length ? <Search /> :\n            (!done ? <Restaurants /> : <Best />)}\n        </div>\n        </DoneContext.Provider>\n      </BestContext.Provider>\n    </RestaurantsContext.Provider>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}